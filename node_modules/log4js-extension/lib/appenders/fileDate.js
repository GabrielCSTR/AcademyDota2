"use strict";
var streams = require('../streams')
, layouts = require('../layouts')
, async = require('async')
, path = require('path')
, os = require('os')
, eol = os.EOL || '\n'
, openFiles = [];

//close open files on process exit.
process.on('exit', function () {
    openFiles.forEach(function (file) {
        file.end();
    });
});

/**
 * File appender that rolls files according to a date pattern and split by log size.
 * @filename base filename.
 * @layout layout function for log messages - defaults to basicLayout
 * @logSize - the maximum size (in bytes) for a log file, 
 *      if not provided then logs won't be rotated.
 * @pattern the format that will be added to the end of filename when rolling,
 *      also used to check when to roll files - defaults to '.yyyy-MM-dd'
 */
function appender(filename, layout, logSize, pattern, timezoneOffset) {
    layout = layout || layouts.basicLayout;
    
    var logFile = new streams.FileDateRollingFileStream(
        filename,
        logSize,
        pattern
    );

    openFiles.push(logFile);
    
    return function (logEvent) {
        logFile.write(layout(logEvent, timezoneOffset) + eol, "utf8");
    };

}

function configure(config, options) {
    var layout;
    
    if (config.layout) {
        layout = layouts.layout(config.layout.type, config.layout);
    }
    
    if (options && options.cwd && !config.absolute) {
        config.filename = path.join(options.cwd, config.filename);
    }
    
    return appender(config.filename, layout, config.maxLogSize, config.pattern, config.timezoneOffset);
}

function shutdown(cb) {
    async.each(openFiles, function (file, done) {
        if (!file.write(eol, "utf-8")) {
            file.once('drain', function () {
                file.end(done);
            });
        } else {
            file.end(done);
        }
    }, cb);
}

exports.appender = appender;
exports.configure = configure;
exports.shutdown = shutdown;

