"use strict";

var RollingFileStream = require('./RollingFileStream')
, format = require('../date_format')
, async = require('async')
, fs = require('fs')
, util = require('util')
, path = require('path');

module.exports = FileDateRollingFileStream;

function FileDateRollingFileStream(filename, logSize, pattern, options) {
    this.pattern = pattern || "yyyyMMddhhssSSS";
    this.size = logSize;
    FileDateRollingFileStream.super_.call(this, filename, logSize, options);
}

util.inherits(FileDateRollingFileStream, RollingFileStream);

FileDateRollingFileStream.prototype.shouldRoll = function () {
    return this.currentSize >= this.size;
};

FileDateRollingFileStream.prototype.roll = function (filename, callback) {
    var that = this
    , nameMatcher = new RegExp('^' + path.basename(filename))
    , pattern = this.pattern;
    
    function justTheseFiles(item) {
        return nameMatcher.test(item);
    }
    
    function index(filename_) {
        return parseInt(filename_.substring((path.basename(filename) + '.').length), 10) || 0;
    }
    
    function byIndex(a, b) {
        if (index(a) > index(b)) {
            return 1;
        } else if (index(a) < index(b)) {
            return -1;
        } else {
            return 0;
        }
    }
    
    function compress(filename, cb) {
        var gzip = zlib.createGzip();
        var inp = fs.createReadStream(filename);
        var out = fs.createWriteStream(filename + ".gz");
        inp.pipe(gzip).pipe(out);
        fs.unlink(filename, cb);
    }
    
    function increaseFile(fileToRename, cb) {
        var ext = path.extname(fileToRename);
        var destination = filename + '.' + format.asString(pattern, new Date(Date.now()));;
        if (that.options.compress && /^gz$/.test(ext.substring(1))) {
            destination += ext;
        }
        //on windows, you can get a EEXIST error if you rename a file to an existing file
        //so, we'll try to delete the file we're renaming to first
        fs.unlink(destination, function (err) {
            //ignore err: if we could not delete, it's most likely that it doesn't exist
            fs.rename(path.join(path.dirname(filename), fileToRename), destination, function (err) {
                if (err) {
                    cb(err);
                } else {
                    if (that.options.compress && ext != ".gz") {
                        compress(destination, cb);
                    } else {
                        cb();
                    }
                }
            });
        });
    }
    
    function renameTheFiles(cb) {
        fs.readdir(path.dirname(filename), function (err, files) {
            async.eachSeries(
                files.filter(justTheseFiles).sort(byIndex).reverse(),
                increaseFile,
                cb
            );
        });
    }

    async.series([
        this.closeTheStream.bind(this),
        renameTheFiles,
        this.openTheStream.bind(this)
    ], callback);

};
